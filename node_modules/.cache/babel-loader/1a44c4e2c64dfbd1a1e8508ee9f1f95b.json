{"ast":null,"code":"import _objectSpread from \"/Users/aleksandra/Programming/react-redux-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/aleksandra/Programming/react-redux-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ADD_COMMENT } from './actions';\nimport { REMOVE_COMMENT } from './actions';\nimport { EDIT_COMMENT } from './actions';\nimport { THUMB_DOWN_COMMENT } from './actions';\nimport { THUMB_UP_COMMENT } from './actions'; //Akcja opisująca dodawanie nowych komentarzy:\n\nfunction comments() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_COMMENT:\n      return [{\n        id: action.id,\n        text: action.text,\n        votes: 0\n      }].concat(_toConsumableArray(state));\n\n    case REMOVE_COMMENT:\n      return [{\n        comments: state.comments.filter(function (comment) {\n          return comment.id !== action.id;\n        }) //comments: (tabl comments przyjmuje od nowa)\n\n      }];\n\n    case EDIT_COMMENT:\n      state.comments.map(function (comment) {\n        if (comment.id !== action.id) {\n          return comment;\n        } else {\n          comment.text = action.text;\n          return comment;\n        }\n      });\n      return [{\n        comments: comments\n      }];\n\n    case THUMB_UP_COMMENT:\n      return state.map(function (comment) {\n        if (comment.id === action.id) {\n          return _objectSpread({}, comment, {\n            votes: comment.votes + 1\n          });\n        }\n\n        return comment;\n      });\n\n    case THUMB_DOWN_COMMENT:\n      return state.map(function (comment) {\n        if (comment.id === action.id) {\n          return _objectSpread({}, comment, {\n            votes: comment.votes - 1\n          });\n        }\n\n        return comment;\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default {\n  comments: comments\n};","map":{"version":3,"sources":["/Users/aleksandra/Programming/react-redux-app/src/comments.js"],"names":["ADD_COMMENT","REMOVE_COMMENT","EDIT_COMMENT","THUMB_DOWN_COMMENT","THUMB_UP_COMMENT","comments","state","action","type","id","text","votes","filter","comment","map"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,WAA5B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,gBAAT,QAAiC,WAAjC,C,CAGA;;AACA,SAASC,QAAT,GAAsC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,WAAL;AACI,cAAQ;AACJS,QAAAA,EAAE,EAAEF,MAAM,CAACE,EADP;AAEJC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFT;AAGJC,QAAAA,KAAK,EAAE;AAHH,OAAR,4BAIML,KAJN;;AAKJ,SAAKL,cAAL;AACI,aAAO,CAAC;AACJI,QAAAA,QAAQ,EAAEC,KAAK,CAACD,QAAN,CAAeO,MAAf,CAAsB,UAAAC,OAAO;AAAA,iBAAIA,OAAO,CAACJ,EAAR,KAAeF,MAAM,CAACE,EAA1B;AAAA,SAA7B,CADN,CACiE;;AADjE,OAAD,CAAP;;AAGJ,SAAKP,YAAL;AACII,MAAAA,KAAK,CAACD,QAAN,CAAeS,GAAf,CAAmB,UAACD,OAAD,EAAa;AAC5B,YAAIA,OAAO,CAACJ,EAAR,KAAeF,MAAM,CAACE,EAA1B,EAA8B;AAC1B,iBAAOI,OAAP;AACH,SAFD,MAEO;AACHA,UAAAA,OAAO,CAACH,IAAR,GAAeH,MAAM,CAACG,IAAtB;AACA,iBAAOG,OAAP;AACH;AACJ,OAPD;AAQA,aAAO,CAAC;AACJR,QAAAA,QAAQ,EAARA;AADI,OAAD,CAAP;;AAGJ,SAAKD,gBAAL;AACI,aAAOE,KAAK,CAACQ,GAAN,CAAU,UAAAD,OAAO,EAAI;AACxB,YAAIA,OAAO,CAACJ,EAAR,KAAeF,MAAM,CAACE,EAA1B,EAA8B;AAC1B,mCACOI,OADP;AAEIF,YAAAA,KAAK,EAAEE,OAAO,CAACF,KAAR,GAAgB;AAF3B;AAIH;;AACD,eAAOE,OAAP;AACH,OARM,CAAP;;AASJ,SAAKV,kBAAL;AACI,aAAOG,KAAK,CAACQ,GAAN,CAAU,UAAAD,OAAO,EAAI;AACxB,YAAIA,OAAO,CAACJ,EAAR,KAAeF,MAAM,CAACE,EAA1B,EAA8B;AAC1B,mCACOI,OADP;AAEIF,YAAAA,KAAK,EAAEE,OAAO,CAACF,KAAR,GAAgB;AAF3B;AAIH;;AACD,eAAOE,OAAP;AACH,OARM,CAAP;;AASJ;AACI,aAAOP,KAAP;AA5CR;AA8CH;;AAED,eAAe;AAAED,EAAAA,QAAQ,EAARA;AAAF,CAAf","sourcesContent":["import { ADD_COMMENT } from './actions'\nimport { REMOVE_COMMENT } from './actions'\nimport { EDIT_COMMENT } from './actions'\nimport { THUMB_DOWN_COMMENT } from './actions'\nimport { THUMB_UP_COMMENT } from './actions'\n\n\n//Akcja opisująca dodawanie nowych komentarzy:\nfunction comments(state = [], action) {\n    switch (action.type) {\n        case ADD_COMMENT:\n            return [{\n                id: action.id,\n                text: action.text,\n                votes: 0\n            }, ...state];\n        case REMOVE_COMMENT:\n            return [{\n                comments: state.comments.filter(comment => comment.id !== action.id) //comments: (tabl comments przyjmuje od nowa)\n            }];\n        case EDIT_COMMENT:\n            state.comments.map((comment) => {\n                if (comment.id !== action.id) {\n                    return comment;\n                } else {\n                    comment.text = action.text;\n                    return comment;\n                }\n            })\n            return [{\n                comments\n            }];\n        case THUMB_UP_COMMENT:\n            return state.map(comment => {\n                if (comment.id === action.id) {\n                    return {\n                        ...comment,\n                        votes: comment.votes + 1\n                    }\n                }\n                return comment;\n            });\n        case THUMB_DOWN_COMMENT:\n            return state.map(comment => {\n                if (comment.id === action.id) {\n                    return {\n                        ...comment,\n                        votes: comment.votes - 1\n                    }\n                }\n                return comment;\n            });\n        default:\n            return state;\n    }\n}\n\nexport default { comments }"]},"metadata":{},"sourceType":"module"}